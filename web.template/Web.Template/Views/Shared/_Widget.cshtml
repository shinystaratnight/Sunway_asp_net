@using Web.Template.Application.PageDefinition
@model Web.Template.Application.PageDefinition.Widget

@{
    string containerId = $"widget-{@Model.Name.ToLower()}-container";
    if (!string.IsNullOrEmpty(Model.Context))
    {
        containerId = $"{containerId}-{Model.Context}";
    }

    string containerClass = $"section-widget section-{@Model.Name.ToLower()}";

    string containerNamespace = "Containers";
    if (!string.IsNullOrEmpty(Model.ContainerNamespace))
    {
        containerNamespace = Model.ContainerNamespace;
    }
    else if (Model.Site != null)
    {
        containerNamespace = $"{Model.Site.Name}Containers";
    }

    
bool userHasAccess = (Model.AccessDisplay != "TradeLoggedIn" || Model.User.TradeSession.LoggedIn)
            && (Model.AccessDisplay != "AdminLoggedIn" || (Model.User.AdminSession != null && Model.User.AdminSession.LoggedIn)) ;
}

<section id="@containerId" data-context="@Model.Context" class="@containerClass">
    @{
        try
        {
            if (Model.ServerSideRender && userHasAccess && (!Model.User.AdminMode || Model.NotEditable))
            {
                @Html.React($"{containerNamespace}.{Model.Name}Container", new
                {
                    entityName = Model.Name,
                    context = Model.Context,
                    contentJSON = Model.ContentJSON,
                    user = Model.User,
                    site = Model.Site,
                    page = Model.Page,
                    entitiesCollection = Model.EntitiesContent,
                    specificEntitiesCollection = Model.SpecificEntitiesContent
                }, serverOnly: true)
            }
        }
        catch (Exception ex)
        {
            Intuitive.FileFunctions.AddLogEntry("Widget", "Server Render Error", ex.ToString());
        }
    }
</section>